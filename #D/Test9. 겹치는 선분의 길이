using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Test189 : MonoBehaviour
{
    // 선분 3개가 평행하게 놓여 있습니다. 세 선분의 시작과 끝 좌표가 [[start, end], [start, end], [start, end]] 형태로 들어있는 2차원 배열 lines가 매개변수로 주어질 때, 두 개 이상의 선분이 겹치는 부분의 길이를 return 하도록 solution 함수를 완성해보세요. 
    // 선분이 두 개 이상 겹친 곳은 [-2, -1], [0, 1]로 길이 2만큼 겹쳐있습니다.

    void Start()
    {
        Solution(new int[3, 2] { { 0, 1 }, { 2, 5 }, { 3, 9 } });
        Solution(new int[3, 2] { { -1, 1 }, { 1, 3 }, { 3, 9 } });
        Solution(new int[3, 2] { { 0, 5 }, { 3, 9 }, { 1, 10 } });
    }

    int Solution(int[,] lines)
    {
        int correct = 0;
        List<int> lineA = new List<int>();
        List<int> lineB = new List<int>();
        List<int> lineC = new List<int>();

        int min = lines[0, 0];
        int max = lines[0, 1];

        for (int i = lines[0, 0]; i < lines[0, 1]; i++)
        {
            lineA.Add(i);
        }

        for (int j = lines[1, 0]; j < lines[1, 1]; j++)
        {
            lineB.Add(j);
        }

        min = min > lines[1, 0] ? lines[1, 0] : min;
        max = max < lines[1, 1] ? lines[1, 1] : max;

        for (int k = lines[2, 0]; k < lines[2, 1]; k++)
        {
            lineC.Add(k);
        }

        min = min > lines[2, 0] ? lines[2, 0] : min;
        max = max < lines[2, 1] ? lines[2, 1] : max;

        for (int index = min; index < max; index++)
        {
            if ((lineA.Contains(index) && lineB.Contains(index)) ||
                (lineA.Contains(index) && lineC.Contains(index)) || 
                (lineB.Contains(index) && lineC.Contains(index)))
            {
                correct++;
            }
        }

        Debug.Log(correct);
        return correct;
    }
}
