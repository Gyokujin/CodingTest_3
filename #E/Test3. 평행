using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Test192 : MonoBehaviour
{
    // 점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다. [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
    // 주어진 네 개의 점을 두 개씩 이었을 때, 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.

    void Start()
    {
        Solution(new int[4, 2] { { 1, 4 }, { 9, 2 }, { 3, 8 }, { 11, 6 } });
        Solution(new int[4, 2] { { 3, 5 }, { 4, 1 }, { 2, 4 }, { 5, 10 } });
    }

    int Solution(int[,] dots)
    {
        int correct = 0;
        float[,,] lines = new float[2, 2, 2];

        for (int index = 0; index < 3; index++) // 3은 경우의 수
        {
            switch (index)
            {
                case 0:
                    lines[0, 0, 0] = dots[0, 0];
                    lines[0, 0, 1] = dots[0, 1];
                    lines[0, 1, 0] = dots[1, 0];
                    lines[0, 1, 1] = dots[1, 1];

                    lines[1, 0, 0] = dots[2, 0];
                    lines[1, 0, 1] = dots[2, 1];
                    lines[1, 1, 0] = dots[3, 0];
                    lines[1, 1, 1] = dots[3, 1];
                    break;

                case 1:
                    lines[0, 0, 0] = dots[0, 0];
                    lines[0, 0, 1] = dots[0, 1];
                    lines[0, 1, 0] = dots[2, 0];
                    lines[0, 1, 1] = dots[2, 1];

                    lines[1, 0, 0] = dots[1, 0];
                    lines[1, 0, 1] = dots[1, 1];
                    lines[1, 1, 0] = dots[3, 0];
                    lines[1, 1, 1] = dots[3, 1];
                    break;

                case 2:
                    lines[0, 0, 0] = dots[0, 0];
                    lines[0, 0, 1] = dots[0, 1];
                    lines[0, 1, 0] = dots[3, 0];
                    lines[0, 1, 1] = dots[3, 1];

                    lines[1, 0, 0] = dots[1, 0];
                    lines[1, 0, 1] = dots[1, 1];
                    lines[1, 1, 0] = dots[2, 0];
                    lines[1, 1, 1] = dots[2, 1];
                    break;
            }

            float slopeA = Mathf.Abs((lines[0, 0, 0] - lines[0, 1, 0]) / (lines[0, 0, 1] - lines[0, 1, 1]));
            float slopeB = Mathf.Abs((lines[1, 0, 0] - lines[1, 1, 0]) / (lines[1, 0, 1] - lines[1, 1, 1]));

            if (slopeA == slopeB)
            {
                correct = 1;
                break;
            }
        }

        Debug.Log(correct);
        return correct;
    }
}
