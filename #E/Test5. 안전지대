using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Test194 : MonoBehaviour
{
    // 다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다. 지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다. 
    // 지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.
    
    void Start()
    {
        Solution(new int[,] { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0 } });
        Solution(new int[,] { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 1, 1, 0 }, { 0, 0, 0, 0, 0 } });
        Solution(new int[,] { { 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1 } });
    }

    int Solution(int[,] board)
    {
        int length = board.GetLength(0);
        int correct = length * length;
        int[,] arrange = new int[length, length];

        for (int i = 0; i < length; i++)
        {
            for (int j = 0; j < length; j++)
            {
                if (board[i ,j] == 1)
                {
                    int xPos = i;
                    int yPos = j;
                    arrange[xPos, yPos] = 1;

                    xPos = i - 1;
                    yPos = j - 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i;
                    yPos = j - 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i + 1;
                    yPos = j - 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i - 1;
                    yPos = j;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i + 1;
                    yPos = j;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i - 1;
                    yPos = j + 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i;
                    yPos = j + 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;

                    xPos = i + 1;
                    yPos = j + 1;
                    if (PosPossible(xPos, yPos, length))
                        arrange[xPos, yPos] = 1;
                }
            }
        }

        for (int i = 0; i < length; i++)
        {
            for (int j = 0; j < length; j++)
            {
                if (arrange[i, j] == 1)
                    correct--;
            }
        }

        Debug.Log(correct);
        return correct;
    }

    bool PosPossible(int x, int y, int length)
    {
        bool answer = false;

        if ((0 <= x && x < length) && (0 <= y && y < length))
        {
            answer = true;
        }

        return answer;
    }
}
