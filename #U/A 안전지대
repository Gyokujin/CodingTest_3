using System;

// 다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다. 지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
// 지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.
public class Solution
{
    public int solution(int[,] board)
    {
        int answer = 0;
        int[,] mines = new int[board.GetLength(0), board.GetLength(0)];
        
        for (int i = 0; i < mines.GetLength(0); i++)
        {
            for (int j = 0; j < mines.GetLength(1); j++)
            {
                if (board[i, j] == 1)
                {
                    try {mines[i - 1, j + 1] = 1;}catch{} // 왼쪽 위
                    try {mines[i, j + 1] = 1;}catch{} // 위
                    try {mines[i + 1, j + 1] = 1;}catch{} // 오른쪽 위
                    try {mines[i - 1, j] = 1;}catch{} // 왼쪽
                    mines[i, j] = 1; // 중앙
                    try {mines[i + 1, j] = 1;}catch{} // 오른쪽
                    try {mines[i - 1, j - 1] = 1;}catch{} // 왼쪽 아래
                    try {mines[i, j - 1] = 1;}catch{} // 아래
                    try {mines[i + 1, j - 1] = 1;}catch{} // 오른쪽
                }
            }
        }
        
        for (int i = 0; i < mines.GetLength(0); i++)
        {
            for (int j = 0; j < mines.GetLength(1); j++)
            {
                if (mines[i, j] == 0)
                {
                    answer++;
                }
            }
        }

        return answer;
    }
}
