#include <iostream>
#include <vector>
#include <string>
#include <bitset>
using namespace std;

// 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
// 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다. 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
// 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다.각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.
// 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다. "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다. 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1,
// 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다. 네오가 프로도의 비상금을 손에 넣을 수 있도록, 비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.
vector<string> solution(int n, vector<int> arr1, vector<int> arr2)
{
	vector<string> answer;
	vector<string> map1;
	vector<string> map2;

	for (int i = 0; i < n; i++)
	{
		string line1 = bitset<32>(arr1[i]).to_string();
		line1 = line1.substr(32 - n);
		map1.push_back(line1);

		string line2 = bitset<32>(arr2[i]).to_string();
		line2 = line2.substr(32 - n);
		map2.push_back(line2);
	}

	for (int i = 0; i < map1.size(); i++)
	{
		string s1 = map1[i];
		string s2 = map2[i];
		string line;

		for (int j = 0; j < s1.size(); j++)
		{
			// cout << s1[j] << " " << s2[j] << endl;

			if (s1[j] == '1' || s2[j] == '1')
			{
				line += "#";
			}
			else
			{
				line += " ";
			}
		}

		answer.push_back(line);
	}

	for (vector<string>::iterator it = answer.begin(); it != answer.end(); it++)
	{
		cout << *it << endl;
	}

	return answer;
}

int main()
{
	vector<int> arr1 = { 9, 20, 28, 18, 11 };
	vector<int> arr2 = { 30, 1, 21, 17, 28 };
	solution(5, arr1, arr2);
}
